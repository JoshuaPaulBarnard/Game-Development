WEBVTT

1
00:00:02.820 --> 00:00:06.810
Welcome back everybody. It is Week seven in game development.

2
00:00:07.830 --> 00:00:11.490
Up 42 a I am Ethan I'm glad to be with you again.

3
00:00:12.509 --> 00:00:19.140
I know we're heading into territory that is filled with new ideas, new capabilities and

4
00:00:19.860 --> 00:00:29.400
Extra software. Last week we looked at texture pack or a little bit in the second part of the screen cast to see how to build basic sprite sheets. I'm going to unpack

5
00:00:30.390 --> 00:00:48.450
Kind of to related concepts today, basically sprite sheets and atlases kind of in one category collections of bitmap images that are compiled into one file and then I'm also going to talk about tile maps which let us define an entire environment, based on something like a spreadsheet.

6
00:00:50.400 --> 00:01:02.940
So it can create level based games. And so this is a big step up this week from basically manipulating simple sprites. We're now going to be able to create animation sequences from frames and spreadsheets analysis.

7
00:01:03.450 --> 00:01:12.750
As well as entire mapped environments that are characters can run around in kind of like Mario World, if you will. So Welcome back to Week seven

8
00:01:13.740 --> 00:01:22.110
I've got a very brief amount of reading for you in the textbook. This week, just enough to talk about our concepts of spreadsheets atlases

9
00:01:22.530 --> 00:01:40.740
Animations and tile maps. Those are our big concepts this week and related to those will look at texture packer again. But I'm also going to introduce you to another program that's available for free, known as tiled and we'll, we'll use both of those to basically manipulate bitmap in

10
00:01:41.850 --> 00:01:53.730
Texture packer to build spreadsheets or atlases of bitmap image frames and then we'll work with tiled to create defined layouts of tile maps basically level maps, if you will.

11
00:01:55.050 --> 00:02:14.910
So that's where we're headed. This week next week, I will jump into some of the more immersive qualities of game development, particularly audio and sound, but also user interface elements will look at how we can compose and create complex graphical user interface elements like

12
00:02:16.230 --> 00:02:22.860
Symbols for numbers of lives left and enhanced score output will also look at how we can create

13
00:02:24.465 --> 00:02:26.910
Initial starting screens, so that

14
00:02:28.410 --> 00:02:39.210
Gives me before the gameplay starts you can give messages to your potential players. Sometimes we call that on a tractor loop, getting people interested in classic

15
00:02:39.660 --> 00:02:48.450
Arcade video games. Those console games in those upright consoles in the storefront arcades from the 1980s on forward to now.

16
00:02:49.080 --> 00:03:01.170
Those all have a tractor loops and then there. The thing that runs when the game is not being played to try and get somebody over there to attract them to the game is kind of like leading the bees to the honey, if you will.

17
00:03:02.280 --> 00:03:09.960
Then we'll move in, in the end of the first half to looking at advanced physics physics engine built into the Fazer game engine, known as the

18
00:03:10.590 --> 00:03:29.460
physics engine and it simulates the physical world, much more accurately than arcade physics does. And so we'll look at games where we can transform inertia and collisions that actually result in things reacting to their collision of bouncing away, if you will.

19
00:03:31.470 --> 00:03:43.830
And the second half will embark starting in week 11 on a plan for the last two months. What you want to build for your final project in this class. By then, I've shown you.

20
00:03:44.370 --> 00:03:52.470
A few more game genres, if you will. And this week in the discussions, I'll just call your attention to really quickly in another tab here.

21
00:03:52.860 --> 00:03:59.010
We've got discussion three open this week talking about types of games game type apologies and genres.

22
00:03:59.490 --> 00:04:03.240
And I hope you'll go check out the two extra credits videos. They're, they're really great

23
00:04:03.660 --> 00:04:09.870
One just kind of talks about the categories and genres and other one goes into kind of a deeper dive kind of a cultural SA, if you will.

24
00:04:10.350 --> 00:04:23.310
On why, at least that author thinks Americans love first person shooters FPS games so much. So I hope you'll check out that discussion and jump in and chime in if you need more time for any of your assignments.

25
00:04:24.390 --> 00:04:29.790
Two things I want to say about that, please ask because I am very happy to hear about

26
00:04:31.110 --> 00:04:32.040
The plans, you have

27
00:04:33.300 --> 00:04:44.220
Pardon me, and to help support you with suggestions and extra time and so getting extra time for me is as simple as asking for it. So please stay in touch with me and correspond with me.

28
00:04:44.760 --> 00:05:01.140
The other thing I want to say about this is, don't bite off too much in these early assignments. Well, the assignments are open ended and they give you the chance to build something. Remember, you can start with an example and extend it, or you can build a very, very simple.

29
00:05:02.220 --> 00:05:14.160
interactive game for example week six his assignment only had two basic requirements, one that you're using sprites to that you're using an input.

30
00:05:15.600 --> 00:05:23.790
Object event, either from the keyboard or from the mouse. So you can keep that very simple, just to get your feet under those concepts.

31
00:05:25.290 --> 00:05:35.610
Today in my demonstration in the first part of today's screen. I'm going to demonstrate working with sprite sheets in I hope the simplest example I can construct and Fazer

32
00:05:36.900 --> 00:05:53.580
And then I'll go on in the second part of this week screen to show you a full fledged level game that uses tile maps and spreadsheets spreadsheets for animation tile maps to create an entire level with a game world basically defined

33
00:05:59.190 --> 00:06:08.640
In the book, like I said, there's basically four pages to read this week. They are focused very intensely on the topics that we're looking at, basically.

34
00:06:09.000 --> 00:06:16.170
Composing multiple frames of bitmap graphics into single files, whether we call that a spreadsheet or a

35
00:06:16.770 --> 00:06:22.350
Texture Atlas, as we'll see today, their basic basically both the same thing with one little distinction

36
00:06:23.010 --> 00:06:36.510
And then using those things to make animations and also using the composed a bit maps to make tile maps. So we'll look at all that in the screen cast, but our friend Travis pause in the Fazer

37
00:06:37.590 --> 00:06:41.880
Gain book has got some great background for you. So please check that out.

38
00:06:46.920 --> 00:06:52.380
Stepping back to look at our software this week. Most things are the same. We're still using Cloud nine

39
00:06:52.740 --> 00:06:59.760
As our development environment. We're still interacting with Cloud nine and the games we build through a browser and I'm recommending still Google Chrome

40
00:07:00.150 --> 00:07:07.500
Because Cloud nine works best with that browser and we're still using the javascript based Fazer community edition version two.

41
00:07:07.920 --> 00:07:24.600
Two dimensional game engine, which is free and filled with fabulous examples of real games from all around the world and game authors have built Fazer games for mobile devices for desktop browsers. Basically, any place a browser runs phase or should work.

42
00:07:26.580 --> 00:07:37.590
two special guests in terms of software applications this week. Again, I'm going to invite back our guests from last week texture packer which is a commercial application for Mac, Windows and Linux.

43
00:07:37.980 --> 00:07:45.780
But also comes with a free mode which is all we need to use to get it to build us both spreadsheets end Atlas files.

44
00:07:46.350 --> 00:07:49.140
And we'll see the difference today as we play with some sample art.

45
00:07:49.860 --> 00:08:04.830
And then we'll also check out a new application, we didn't look at before called tiled also free, although it invites you to make donations. You can download it for free from map editor dot org and it's really built around creating defined world layouts with level.

46
00:08:05.910 --> 00:08:27.900
Art that can be graded out and then generated by Fazer very quickly, easy way to build a level, basically. And as always my favorite resource online for getting assets sprite art audio whatever you need backgrounds open game art org is a free website. We're going to use it again today.

47
00:08:29.100 --> 00:08:36.480
As I explore the topic of spreadsheets Annapolis is a little bit more with you. I'll be borrowing some art from some authors on that site.

48
00:08:37.350 --> 00:08:43.230
To make it all work, of course, in our class you're invited to create your own assets if you want to but

49
00:08:43.920 --> 00:08:50.760
If any of you have embarked on that journey, yet you know that it's very time consuming to build all the maps needed for gameplay.

50
00:08:51.450 --> 00:09:01.920
And so a good strategy one real world game developers take all the time is to use placeholder assets in that way open game art is wonderful. Most of the assets. There are free.

51
00:09:02.910 --> 00:09:14.880
For example, today I'm going to use the red haired boy sprite sheets from the developer bevel lean and you can see that this is a free file that we can use.

52
00:09:15.450 --> 00:09:23.730
Public Domain. It says over here in the left hand side for the license. That means it's totally free. And we can use it however you want without necessarily giving

53
00:09:24.120 --> 00:09:30.420
The developer credit even although always nice to mention the developer in your credits for again if they built some art for you.

54
00:09:34.860 --> 00:09:38.040
So that's our software lineup this week.

55
00:09:41.280 --> 00:09:46.950
As always remember to use version to the Fazer community edition of our game engine.

56
00:09:47.490 --> 00:09:53.760
It's up there at Github I've got the link here and in canvas with all of the screen cast and reading assignment page.

57
00:09:54.240 --> 00:10:02.100
Check out that link and you will find the right version, remember that there has been now a newer version of the phase or engine version three released

58
00:10:02.730 --> 00:10:12.930
But it does not have very many examples for very much functionality it so we're sticking with version to be careful that you're using the right version Fazer

59
00:10:13.470 --> 00:10:22.770
Again, as a quick digression on that topic. If you're in Cloud Nine and you've got your workspace open and you've got a copy of Fazer that your file.

60
00:10:23.220 --> 00:10:40.170
Your project is loading just double click here and when it opens in the text editor, the very first line in a comment will tell you the version of phase or you're using. So here I've got from last semesters example a version 2.8 that should be fine. Although the freshest version.

61
00:10:42.240 --> 00:10:43.680
Is two point 11

62
00:10:44.850 --> 00:10:49.020
So here's two point 11 version. So I should probably update my version seven file.

63
00:10:50.460 --> 00:10:51.480
Will do that a little later.

64
00:10:56.040 --> 00:11:05.970
So a little recap and I'm looking forward again, we talked about spreadsheets last week, basically a single file that has multiple frames.

65
00:11:06.420 --> 00:11:13.560
For a sprite contained in it multiple frames a bitmap images. This is very efficient for the Fazer game engine. If we can

66
00:11:14.160 --> 00:11:23.280
Compile collect all of our separate frames that we want to use for a particular character sprite or other things in the game into a single image file.

67
00:11:24.015 --> 00:11:36.210
Then we can load it just once, when we do the preload and we can then tell Fazer by telling it the dimensions of the width and the height of each frame and the single file.

68
00:11:36.660 --> 00:11:45.780
You can tell it numerically. How to find each one of these frames so spreadsheet is a single bitmap image contains multiple frames.

69
00:11:46.500 --> 00:11:59.550
And each frame has exactly the same dimensions, the same width and height. That's an important distinction from the other form of a compiled asset known as a texture Atlas for a sprite Atlas.

70
00:12:00.360 --> 00:12:05.580
Now the commercial software texture packer that I have on the slide here from the folks at code and web

71
00:12:06.210 --> 00:12:14.310
Completely satisfies all of our needs for building both regular standard size spreadsheets, as well as variable dimension.

72
00:12:14.940 --> 00:12:25.770
Texture atlases or sprite atlases in it's free mode. So I'll use it again in free mode today to build a spreadsheet out of some of the art that I've gotten off of open game art org

73
00:12:26.670 --> 00:12:32.310
They have a great tutorial on how to create a spreadsheet up on their website that's linked from the slide and

74
00:12:32.790 --> 00:12:41.190
Frankly, if you saw my second part of the video last week. You see it's pretty much a matter of drag and drop, although I'll call to your attention when we use it this week.

75
00:12:41.640 --> 00:12:49.320
Some of the detailed settings that let us decide whether we're making a fixed dimension spreadsheet for a variable dimension texture Atlas.

76
00:12:51.720 --> 00:13:02.880
So that brings us to the texture or sprite Atlas topic, which itself is basically in a file format in terms of a graphic file the very same thing. It's a bitmap.

77
00:13:03.420 --> 00:13:14.430
Often saved as a PNG image progression of natural graphics and this PNG image is got a number of benefits P AMP G can have transparency in them.

78
00:13:14.910 --> 00:13:30.510
So we don't have to see the edges of the game sprite rectangles we can have transparent pixels in a PNG. So you'll see most of the art that we get from places like open game art all the art that I create myself. I always use the P AMP G format to save it.

79
00:13:31.950 --> 00:13:39.330
So it's compared to a spreadsheet, a sprite Atlas comes with that bitmap file that has multiple

80
00:13:40.170 --> 00:13:50.280
Maps in it, but each frame each bitmap in the single file could have a different width and height in a sprite Atlas and what makes that possible.

81
00:13:50.910 --> 00:14:07.290
Well, first of all tools like texture packer. And that's because texture packer when we import the individual images for our sprite sheet or sprite Atlas, it can generate a data file that contains all of the dimensions.

82
00:14:08.400 --> 00:14:13.590
Of each of the assets. So on the right hand side of the screen. All that's a little more on the side.

83
00:14:14.100 --> 00:14:23.700
On the slide you can see I have a JSON, which stands for javascript Object Notation data file. It's basically a structured set of information. It includes

84
00:14:24.360 --> 00:14:33.000
A field called filename for each of the frames and then it also includes a source size, which tells us exactly the dimensions.

85
00:14:33.450 --> 00:14:52.680
So in my bitmap on the left, I got a little red box around balled up P AMP G that bitmap asset that got collected into the Atlas by texture packer. And I can see over here that texture pack or nose and will tell the Fazer engine that this thing is exactly 16 by 16 pixels and dimension.

86
00:14:53.760 --> 00:14:58.740
Right next to it. I've got the paddle, or excuse me, that's the brick. The red thing.

87
00:14:59.490 --> 00:15:09.840
Forgetting my breakout game here and it is named brick dot PNG and it has a dimension of 32 pixels wide by 16 pixels tall and I can see that in the data file.

88
00:15:10.260 --> 00:15:17.220
Fazer reads that information so that we can refer to individual frames in a sprite Atlas by the file name.

89
00:15:17.970 --> 00:15:23.580
And Fazer will automatically find them with their dimensions and their frame position.

90
00:15:24.510 --> 00:15:33.870
Made available from this JSON file. So the big difference about these two formats for storing collected bit maps spreadsheet has no data file, it's just an image.

91
00:15:34.260 --> 00:15:40.020
And it can be that way because every single width and height of the individual frames is exactly the same.

92
00:15:40.530 --> 00:15:50.520
So we load a spreadsheet with fixed frame size, you'll see today why initially loaded and the preload sequence. I'm going to tell Fazer the width and height of each of the frames for it.

93
00:15:51.030 --> 00:15:58.860
So it doesn't need a data file to figure that out. But the sprite Atlas because it has a variable dimensions for each of the bitmap compressed into that single image.

94
00:15:59.310 --> 00:16:09.990
It needs to know where they're located in the larger file and then it needs to know their width and height, of course, so it can pop them out basically crop out the rest of the file. When we asked it to use one of the frames.

95
00:16:11.100 --> 00:16:15.630
So very similar concepts spreadsheet and sprite Atlas.

96
00:16:18.390 --> 00:16:31.110
Now we can do animation inside of Fazer with either kind of compiled file. If we've got a bitmap that has multiple frames in it. It's very easy basically three lines of code here.

97
00:16:32.460 --> 00:16:38.370
If we've got a seven frame animation here of our player jumping that we want to do something with.

98
00:16:39.540 --> 00:16:57.960
We can add the sprite like we normally would. And we located on the screen with a horizontal and a vertical coordinate in our x and y grid that the screen is laid out and we're 00 as the top left, and it goes across in the positive for the x values first and then goes down.

99
00:16:59.070 --> 00:17:00.180
For the why values.

100
00:17:03.840 --> 00:17:22.200
We tell it the name of our asset that we pre loaded this case, you know, I'm not showing you the preload code. But I named the asset player and then we tell it which frame to use for that sprite by default and player in this case was defined as a sprite sheet when it was loaded from

101
00:17:23.550 --> 00:17:34.380
The preload sequence. So once we load up a sprite that has associated with it a frame from a sprite sheet we can add defined multi frame animations and give them names.

102
00:17:35.760 --> 00:17:44.250
So here I'm doing animations Adam naming the animation sequence here. I call it down and in square braces.

103
00:17:44.820 --> 00:17:52.260
Representing a list or an array value for the second argument here I'm defining which frames belong to this animation name down

104
00:17:52.650 --> 00:18:00.570
So I've got the seven frames up above from my spreadsheet and I want to include all of them in the animation sequence. I just list them in the order that I want.

105
00:18:01.260 --> 00:18:13.020
Fazer to play them back as an animation. Then I let it know the playback rate. And so we can set these values to different values. These are fractions of a second. And I'll show you how those work in just a minute.

106
00:18:14.610 --> 00:18:26.160
Then whenever we want that sprite on the screen. The player sprite to perform the animation sequence that we've defined and named we just call the play method and we pass it the name of the animation.

107
00:18:27.570 --> 00:18:30.330
So we'll give this a shot here in just a moment.

108
00:18:35.130 --> 00:18:44.970
I'm gonna hop over to open game art and to get to my red haired run and jump spreadsheet assets. All I did was searched for running spreadsheet.

109
00:18:46.050 --> 00:18:52.920
And I've logged in account some open game are are free, so please make an account. If you haven't already, it's going to be very valuable to have that

110
00:18:53.730 --> 00:19:04.890
And I found a handful of art assets on their search engine contained in their site. And this is where red haired run and jump spreadsheet guy came from.

111
00:19:05.760 --> 00:19:18.450
And I like this one today for two reasons. One, the art is very large. So there's a lot of detail to find in the bit maps. Your you'll see in my later demonstration of a full fledged level game. I'm going to use some art assets that are very tiny.

112
00:19:19.500 --> 00:19:27.000
But here we got a nice, big, rich art, and I also like that the license lifted up listed on the left over here says it's in the public domain.

113
00:19:27.420 --> 00:19:36.480
Meaning it's free to do whatever I want with which again is very generous of the artists here Beverly appreciate that. Mr. Beverly

114
00:19:37.410 --> 00:19:50.940
So I downloaded that already. You can download any asset from open game art. Once you have a free account just by clicking on the file link here. So I got a a kilobyte file downloaded and I basically have them here.

115
00:19:53.910 --> 00:19:56.100
And you can see that this artist gave me

116
00:19:57.180 --> 00:20:00.300
A whole bunch of independent separate

117
00:20:02.670 --> 00:20:05.250
PNG images that are transparent in the background.

118
00:20:06.300 --> 00:20:14.430
And what I'd like to do is I'm going to build a spreadsheet for a demo here out of the six separate P AMP G frames for the running sequence that he's defined

119
00:20:17.820 --> 00:20:22.230
And to do that, I'm going to use texture packer. I'm going to open up texture packer.

120
00:20:22.710 --> 00:20:34.740
Every time you launch texture pack or they want to remind you that you could give them money if you wanted to, but again, we're in school and there's no need to buy the commercial version, you can use the free version. So when it hit the US free version button again.

121
00:20:35.850 --> 00:20:38.220
And that's fun. I got to earlier.

122
00:20:39.330 --> 00:20:40.380
Worry about that later.

123
00:20:42.060 --> 00:20:49.950
And now I'm getting a new version. Notice all get a reminder later to that most of all, just happened today because I just ran this earlier today without that morning.

124
00:20:50.820 --> 00:21:00.750
So texture packer has this very friendly extremely simple kind of disarmingly simple interface. The big gray box with the goofy artist in his palate there.

125
00:21:01.260 --> 00:21:12.900
Is inviting us to drag the assets from the Finder or from the Windows desktop directly into that area. And so I've got my six frames selected for running and I'm going to drag them in here and let them go.

126
00:21:16.380 --> 00:21:19.530
And it's giving me preview here now.

127
00:21:20.730 --> 00:21:30.150
Of each of the frames that it's creating see them named over here. And as I click on the middle jump me around so you can see what it's done is it's made a three.

128
00:21:30.900 --> 00:21:51.690
sprite by three sprite wide by two sprite tall layout of the six frames in a single rectangle, it's going to become a single file right and if I save this as a sprite Atlas, then I would get a data file and it would have frame names, based on the original file names.

129
00:21:52.770 --> 00:21:56.910
Because these are all exactly the same size. Their 450

130
00:21:58.860 --> 00:21:59.820
Pixels wide.

131
00:22:02.730 --> 00:22:08.700
That's very large by 754 pixels, I can confirm that that click around

132
00:22:10.380 --> 00:22:12.000
It'll give me information about each of them.

133
00:22:13.080 --> 00:22:22.320
She can see they're all for 57 by 754 that's super big for Fazer game, but I'll show you again some more tricks today where we can scale the art down if we want to

134
00:22:23.190 --> 00:22:28.620
Of course, I could have resize these and pixel or or in Photoshop. First, to make them smaller if I wanted to.

135
00:22:29.490 --> 00:22:34.170
Leave him full size because my first demo is going to be really simple. Just showing us how to get an animation up and running.

136
00:22:34.770 --> 00:22:52.020
Now sometimes texture packer will give you some advice when you drag and drop your bitmap image assets into a little panel with the artists there texture pack or analyzes all the files here. It's given me a tip down here at saying, use the texture format, known as PNG.

137
00:22:53.310 --> 00:23:02.370
To reduce the spreadsheet file size by 60% so the actual footprint in memory of the image that's going to be created could be cut.

138
00:23:02.760 --> 00:23:14.400
By 60% from what looks like 299 kilobytes and its current format, all the way down to 116 kilobytes. And it's inviting me with a button here to switch to the PNG eight format.

139
00:23:15.480 --> 00:23:25.140
PNG eight versus our current format which is known as PNG 32 simply describe how many bits of memory are used for each pixel

140
00:23:25.830 --> 00:23:39.390
The 32 bit P AMP G can support all the colors in the rainbow plus transparency, the P AMP G eight can also support transparency, but it's limited to 256 colors and it's palette.

141
00:23:40.290 --> 00:23:53.370
So in this case, if I reduce the format down to the eight bit PNG format I may lose some of the color fidelity in my little guy. But I'm going to do that because those are big images. I'm gonna say use PNG.

142
00:24:00.765 --> 00:24:05.940
Now they're giving me a another sales pitch here after I picked PNG.

143
00:24:07.050 --> 00:24:12.570
They're telling me that if I want to save it in any format, other than a PNG things either a bunch of other formats here.

144
00:24:13.500 --> 00:24:24.090
Then I have to buy the commercial version, but again, a reminder, we do not need any of the commercial features we only need our assets saved in one of the two

145
00:24:24.900 --> 00:24:34.620
P AMP G formats either PNG eight or PNG 32 and so it converted my bit maps. Now to the eight bit version and they still look great. So I'm happy with that.

146
00:24:35.100 --> 00:24:50.190
Maybe I got a little stepping in some of the shadows and stuff. But that's not a problem for me. So before I save this. I want to look at the output file settings over on the right panel here and I'm going to focus for a second on this button called choose data format.

147
00:24:51.600 --> 00:25:06.990
If you saw my demo last week when I made sprite Atlas that had a variable size width and height for each of the individual bitmap in it. I used a very particular format. I used to format specific for Fazer

148
00:25:08.250 --> 00:25:13.560
Listed way down here alphabetically. That was called Fazer JSON array.

149
00:25:14.640 --> 00:25:22.080
And that built the data file that had information about the name of each frame and also the dimensions in the placement of that frame.

150
00:25:22.530 --> 00:25:34.590
And it's bitmap inside the larger PNG file. Now I only need to use a data format. When I have variable dimensions bitmap in the same sheet.

151
00:25:35.190 --> 00:25:54.060
So I don't need that. Here I have technically speaking, a traditional spreadsheet here because each of these guys is 457 pixels wide by 754 pixels tall. So I'm going to use the spreadsheet only setting the very top most setting here and say convert

152
00:25:59.370 --> 00:26:00.720
And he flipped back to PNG.

153
00:26:05.130 --> 00:26:09.780
I'm going to uncheck that update project setting the recommended values because he went and changed my stuff there for me.

154
00:26:11.670 --> 00:26:13.020
So now I've got that.

155
00:26:14.970 --> 00:26:18.180
And I'm ready to save or publish the spreadsheet.

156
00:26:21.090 --> 00:26:33.990
Now it's telling me it wants me to name the file that I'm saving it as I'm going to call this running PNG and I'll just put it on my desktop to make it easy to find. What I want to upload it to Cloud nine so I'm gonna hit Save. Now,

157
00:26:47.340 --> 00:26:56.430
I think we're okay with the PNG, maybe it's unhappy about me using the eight bit will check it out here in a second. It says it wrote the image. Let's see if it really did.

158
00:27:00.360 --> 00:27:05.760
Oh, did write it, but you can see actually in the free version. It's not letting me use PNG as I'm going to go back

159
00:27:07.230 --> 00:27:09.180
PNG 32 for this one.

160
00:27:12.960 --> 00:27:19.770
There he goes. He's a little happier. I'm going to get rid of that prompt. I'm going to choose the data format again to make sure we're all good.

161
00:27:20.940 --> 00:27:25.050
And I will publish the spreadsheet. One more time. This time I didn't get that warning.

162
00:27:25.680 --> 00:27:34.440
So it was unhappy about me trying to change it to the smaller eight bit PNG that clearly is a commercial feature the app, good to see that for all of us. Right.

163
00:27:34.950 --> 00:27:50.160
And now I want to show you that that doesn't matter. So there's my 32 bit my P AMP G 32 file. If I want to convert this to eight bit. Now I could do it and pixel or or in Photoshop. I think I already have Photoshop running. So I'll just do it right here in Photoshop.

164
00:27:51.330 --> 00:28:03.690
So here I am. I opened up the image that's composed now in a single PNG and all I need to do is receive the file format. So I'm going to go to export on Photoshop file menu and choose Export as

165
00:28:05.340 --> 00:28:12.870
In here, notice that they have this very nice checkbox in Photoshop that says smaller file eight bit for PNG.

166
00:28:13.560 --> 00:28:29.460
And I'm basically getting the benefit of Photoshop. Now I happen to have that licensed but pixel or will do the same thing for you and let you convert it to an eight bit P AMP g. So I'll export this guy again, I'll call him running a bit just to keep track of the differences here.

167
00:28:30.750 --> 00:28:37.860
Maybe we'll do a little compare and contrast in a second. So now I used Photoshop and I've now got two versions of that P AMP G.

168
00:28:41.130 --> 00:28:49.410
Got that one and that one and and looking at it in preview and my find her on the Mac, they look like they have exactly the same color fidelity.

169
00:28:49.770 --> 00:29:00.930
So certainly, I think I want to go with the eight bit, because if we can get information here look at the file size difference, the amount of memory that the browser is going to need to allocate to the

170
00:29:01.800 --> 00:29:08.010
32 bit PNG is way bigger, more than twice as big. It's like two and a half times as much memory.

171
00:29:08.460 --> 00:29:23.340
That will make the game runs slower, but also mean that files take longer to load over the internet when somebody's playing your game on their mobile device or on their home browser or their tablet. So I'm going to import running eight bit PNG into my project here.

172
00:29:24.360 --> 00:29:34.410
Here, here I am back and Cloud nine and a fire up a new folder for this week, calling modules 07 dash live in the other module seven folder I have

173
00:29:35.250 --> 00:29:50.310
Fully composed project level based game that uses spreadsheets and tile maps and animation and I'll demonstrate how to build that in part two of this week screen casts that all provide later today. But for now, I'm gonna go ahead

174
00:29:51.930 --> 00:29:52.440
And

175
00:29:56.640 --> 00:30:04.980
Duplicate my JS file Jess folder because that's got phase, you're in it, drop it into my module seven live folder and I got a copy of the library.

176
00:30:06.750 --> 00:30:17.580
I'll go ahead and make a fresh HTML file. Just as a quick reminder of what we do when we build these things from scratch. So I used to cloud nines File, New, from template feature to open up a new untitled file.

177
00:30:18.180 --> 00:30:30.510
And I'm going to make a note here is the Fazer sprite sheet animation example we'll keep it as simple as we can for this first example, the big thing I need to do here. Of course it's not in my template from

178
00:30:31.920 --> 00:30:34.920
Cloud nine as I need to load the Fazer

179
00:30:36.420 --> 00:30:38.610
Version to library.

180
00:30:39.960 --> 00:30:46.710
Basically all of their javascript that gives instructions to the browser. But how to run a game engine.

181
00:30:47.640 --> 00:30:54.210
So to do that, I'm going to write an HTML script element. And I know for a lot of us were new to scripting. I want to remind you

182
00:30:54.570 --> 00:31:04.290
That I'm going to save my HTML file in module 07 dash live. Let me do that right now. So we're open to save and I'm going to save this as

183
00:31:04.890 --> 00:31:13.500
Animation dot HTML. So you can see the file over here in the workspace now and you'll notice that inside module 07 live a closed.

184
00:31:14.040 --> 00:31:22.740
The visible container there for the jazz folders. You can see that it's basically inside module 07 live right next to the animation that HTML file.

185
00:31:23.370 --> 00:31:33.750
What I want to get to is a file inside that folder name, sort of, right, the proper attribute for the source direction here that I'm giving it. I'm going to write the folder name after the, quote, Mark.

186
00:31:34.290 --> 00:31:41.520
So opening, quote, and then the folder name because that folders in the same folder as this file, so I can just tell the browser, hey look next to you.

187
00:31:41.880 --> 00:31:51.960
Right next to me is this Jess folder to let it know that it's a folder. I'm gonna write a slash after the name whenever the browser sees a slash and one of these source attributes that says, hey,

188
00:31:53.340 --> 00:31:58.200
The phrase immediately preceding the slash in the text must be the name of a folder. I'm looking for

189
00:31:58.800 --> 00:32:07.230
Now make sure that you write it so that you have the quotation mark and then your folder name. Don't put another slash after the quotation mark.

190
00:32:07.680 --> 00:32:11.190
That will tell the browser to look somewhere else and your workspace. You don't want it to look.

191
00:32:11.670 --> 00:32:17.700
At the top level of your workspaces, which is what that first slash will do. It'll move it all the way up to hear the very top level.

192
00:32:18.420 --> 00:32:28.920
We want to stay in our module seven live folder. So I'm just going to write bookmark. And then the folder name JS than the slash then the file and trying to load. So Fazer men.

193
00:32:30.900 --> 00:32:40.110
And I'm going to hit a closing bracket greater than symbol on the keyboard. That's the shift period key so you get that greater than symbol and Fazer will automatically right

194
00:32:40.800 --> 00:32:49.980
The remaining HTML that needs to be written to close up that script element. So with this much of the page written so far we've loaded into the browser sprain.

195
00:32:50.520 --> 00:33:03.180
All of the thousands of lines of javascript already written by the Fazer developer to create a game engine and all the objects needed to model that some of which we started to play with already

196
00:33:04.320 --> 00:33:04.890
Up to

197
00:33:06.060 --> 00:33:08.610
Create another script element.

198
00:33:09.810 --> 00:33:23.490
hold our code. So notice again this script element that I opened online six with the very beginning opening bracket, the less than symbol and then the word script I closed also on the same line.

199
00:33:24.720 --> 00:33:32.640
With the help of Cloud nine doing code completion for me. Now the second script element needs to come after the closing tag or the first one.

200
00:33:33.420 --> 00:33:40.980
I'm gonna write an opening script tag here and I'll write the closing bracket and Cloud nine again rights to closing tag for me as a feature.

201
00:33:41.460 --> 00:33:50.370
I'm going to go between the two. So right after the greater than symbol after the word script, but before the less than symbol that starts to closing bracket. You can see I hope

202
00:33:50.850 --> 00:33:57.270
In the screen cast my white blinking bar cursor there and I hit the return key a couple times just to get

203
00:33:57.900 --> 00:34:13.260
Some space opened up in there so that I can write kind of very easy on the human eyes code where I write one javascript instruction to the browser on each line of code, followed by a semi colon. So in this demo.

204
00:34:14.310 --> 00:34:33.390
I'm gonna write some HTML content. I mean, some CSS and Javascript got too many languages in my brain line nine is a Javascript single line comment. It starts with two dashes to slashes. That is, and here. First thing I want to do in my game is create Fazer gain instant

205
00:34:35.430 --> 00:34:41.670
Going to do that with the named variable, so I can talk to the browser about this game that I've created in its memory.

206
00:34:42.240 --> 00:34:58.590
So all right, the reserved statement bar there. That's how I create a new named container in the browsers memory space to store something and I'm just going to call it gain to keep it easy on my brain and to follow the convention that all the Fazer examples that we've seen before, follow

207
00:35:01.860 --> 00:35:08.340
Alright, an equal sign after I declare the variable name so far game equals, and on the right hand side of the equal sign.

208
00:35:08.850 --> 00:35:18.300
I'm going to give javascript a new statement. This tells it to go make a new copy of an existing object that's defined somewhere.

209
00:35:18.690 --> 00:35:37.020
In this case, this object is defined in the phase or library that starts off with capital P Fazer and then a period to use dot notation to tell it that inside the Fazer library. I want to find a game and that game object is to find already

210
00:35:38.040 --> 00:35:41.490
So now I'm going to write round parentheses here.

211
00:35:42.690 --> 00:35:51.150
Those are shift nine and zero on typical keyboards and Cloud nine has put my cursor in between those. So I'm gonna hit return a couple times.

212
00:35:51.750 --> 00:35:59.550
To get them onto a separate line because this var game statement represents one complete instruction for the javascript engine.

213
00:36:00.180 --> 00:36:07.890
Our browser. I'm going to put a little semi colon after that closing round per in and I know some of the syntax and Javascript is a little funky.

214
00:36:08.400 --> 00:36:21.570
And a little hard to get used to. But what I've got types so far, basically, is the shell of the command to the browser to go look inside the Fazer javascript find this thing, defined as a game capital G game.

215
00:36:22.200 --> 00:36:33.960
And then create a new one. That includes some settings for it. So I'm going to make a big game. This time I'm gonna make a 800 pixel wide by

216
00:36:35.640 --> 00:36:37.500
400 pixel tall game.

217
00:36:39.660 --> 00:36:53.340
So when we make a new phase or game. It wants some arguments from us. The first is with and pixels. Second is, oops. Didn't mean to get out. So my comment there is height and pixels.

218
00:36:55.320 --> 00:36:57.540
So I got those two values stashed in there.

219
00:37:00.180 --> 00:37:06.480
The next parameter. The next argument, if you will, is called the render mode.

220
00:37:08.640 --> 00:37:17.790
And today, I'll try using predefined render mode. So it's part of the Fazer library somewhere i capital P Fazer and then a period when to use the one

221
00:37:18.270 --> 00:37:26.100
Called auto I'm going to let it pick which render mo to use the javascript in the Fazer library will kind of look at my browser and decide

222
00:37:26.370 --> 00:37:44.700
Do I need to use the old fashioned canvas object in the browser to draw the game as a bunch of shapes or can I used more advanced opengl engine should be a lot faster. So that is the third argument that I give it, before the argument that I give it, is the

223
00:37:46.170 --> 00:37:48.390
Element to draw the game.

224
00:37:50.040 --> 00:37:58.110
And we just want to put it right in the body of our page. So I'm going to simply call that a no value. No in javascript is basically a blank value.

225
00:37:58.650 --> 00:38:06.900
And the Fazer engine when we create a new game knows that if I give it a no value for the element to draw the game and it pretty much just sticks it right in the body.

226
00:38:07.710 --> 00:38:16.650
What's the purpose of this fourth element. Well, imagine you building a more complicated web page. Maybe there's other stuff going on somewhere you want to embed a Fazer game.

227
00:38:17.070 --> 00:38:22.410
As a rectangle like an embedded youtube video, if you will, right inside your regular web page.

228
00:38:23.070 --> 00:38:37.980
This element reference let you do that if you had more complicated HTML for a web page here, you could go off and give a reference here for the fourth argument to that element and it's id value and it would go find it.

229
00:38:39.390 --> 00:38:45.540
And then finally, in curly braces. The parameter or argument.

230
00:38:46.590 --> 00:38:47.160
Is

231
00:38:49.410 --> 00:38:50.640
Giving Fazer

232
00:38:52.530 --> 00:38:58.260
An indication of the named functions to use for game state.

233
00:38:58.800 --> 00:39:11.040
And we've talked about games dates. The last couple classes. I didn't include them again in this week slide deck. But if you're forgetting what the game states are well I'm going to pretty much write them out here as property names and I'll try and remind you what they do.

234
00:39:12.330 --> 00:39:19.200
For state that the Fazer game engine goes through. Is it starting to get ready to make a game playable called the preload state.

235
00:39:22.260 --> 00:39:31.920
And so the first thing I do in the curly braces here where I'm defining an object value is give it a property name on the Start off with the preload property and then write the colon symbol.

236
00:39:32.730 --> 00:39:39.180
Just to the right of your L key on the keyboard. If you hold down the shift there you'll get one of those double colons and then after the colon.

237
00:39:39.600 --> 00:39:54.375
I'm going to write the name for some named function. I'm going to create in a minute. I haven't made it yet, but I'm gonna go ahead and stick my neck out here and say that I'm going to name this function. My preload code get a reminder to me that I'm making up this name in this case.

238
00:39:55.380 --> 00:40:01.620
The property names in the curly braces are fixed. Those are defined by the Fazer game engine. The word preload.

239
00:40:02.010 --> 00:40:13.290
That is a property name, the right hand side of the colon, however, is a name I'm creating and that will actually correspond. I'll go ahead and kind of right off the shelf it right now to a named function.

240
00:40:15.480 --> 00:40:18.540
So my preload code is going to be a named function.

241
00:40:20.070 --> 00:40:29.790
And to define a name function, you might notice the color coding in Cloud nine text editor changed as soon as I put a pair of round parentheses.

242
00:40:30.270 --> 00:40:40.290
After the function name it turned it blew to create a named blocker code named function in the javascript language. We have to write the function statement a space.

243
00:40:40.680 --> 00:40:49.560
And then the name that we make up in this case I made up my preload code and then a pair of round parentheses, you have to put those round parentheses on the end.

244
00:40:49.950 --> 00:41:04.680
Of your function name as kind of a syntactic decoration. So the browser knows that this is going to be a named block of code and then you put your entire block of code in between a pair of curly braces opening closing curly braces.

245
00:41:05.760 --> 00:41:08.130
So my preload code. I'll make a little comment here.

246
00:41:10.080 --> 00:41:10.890
I function.

247
00:41:12.960 --> 00:41:13.650
To use

248
00:41:15.960 --> 00:41:18.030
For the preload state.

249
00:41:19.350 --> 00:41:34.950
Game. So the game again goes through a series of states before it gets to the endlessly repeating game update loop and preload is the first one preload is where we do things like load up our traffic assets. So in this preload. I'll be loading up that spreadsheet.

250
00:41:36.240 --> 00:41:45.810
Then we've got a create state the Create state that I define here in the curly braces while I'm back, you're making the new game instance again create

251
00:41:46.200 --> 00:41:54.870
Is a property name defined by the game engine, then I read a colon and then the name of the function that I'm going to make in this case I'll call it my create code.

252
00:41:56.100 --> 00:41:57.180
I create code.

253
00:41:58.740 --> 00:42:02.100
Is my function for Fazer to us.

254
00:42:03.240 --> 00:42:14.580
Or the creator state. This is where it's drawing the game world initially putting sprites into the game world setting up everything so that when the game loop starts the games ready to play.

255
00:42:17.850 --> 00:42:21.240
And this is my create code that I will place here.

256
00:42:22.770 --> 00:42:26.250
Now the third and last required

257
00:42:27.300 --> 00:42:34.620
State to define is the main game loop. The thing that runs over and over and over again to execute the gameplay and we call this

258
00:42:35.040 --> 00:42:50.820
The update state in the phase or engine. And again, so within the curly braces here that I'm writing out these properties for the fifth at argument update is defined by the Fazer he mentioned as the name of the property. I need to use. And then I write a colon.

259
00:42:52.020 --> 00:42:53.310
And make up another

260
00:42:54.960 --> 00:42:59.520
Name for a new function, this one I'll call my update code. So I'll plop them down here.

261
00:43:01.980 --> 00:43:03.750
My update code is gonna be my function.

262
00:43:06.450 --> 00:43:07.230
Or the game.

263
00:43:10.980 --> 00:43:12.810
They call the update state.

264
00:43:17.940 --> 00:43:22.590
And now I gotta declare the function. All right. The statement function and

265
00:43:24.300 --> 00:43:39.000
o'brien's helpful. It's seen already that I've declared a function name in the parameters for the new game. So it gives me type ahead. I'll pick it off their lists are the type everything in by hand here. So now I've got the basic shell of a game.

266
00:43:40.260 --> 00:43:44.910
Now I need to load some assets. I don't have my asset up there yet, though. So let's upload him.

267
00:43:46.770 --> 00:43:55.530
I'm going to put them into an assets folder again to model typical file system structure. So I made a new folder inside modules, your seven live

268
00:43:56.580 --> 00:44:05.820
Pardon me for my reminder there about cleaning up the yard and I call the assets. So it's sitting here inside module 07 live and I'm going to drag

269
00:44:06.630 --> 00:44:11.760
Little spreadsheet that I made. Let's see. It's running eight bit P AMP G. There he is, with a six frames.

270
00:44:12.180 --> 00:44:21.540
Of the little red haired guy running around. I'm going to drag him into the assets folder in the browser, and I should see an upload activity panel up here and when it's done that file should be up there.

271
00:44:23.160 --> 00:44:31.380
So now it's time to load my spreadsheet and this is a spreadsheet. So it has

272
00:44:32.400 --> 00:44:34.500
fixed width and height.

273
00:44:35.730 --> 00:44:39.600
For each frame right and we know that those were huge numbers.

274
00:44:40.800 --> 00:44:57.600
So we'll see what I type in here in a minute. So I'm going to refer to my game instance again I named my game just lowercase G game appear when I declared the variable and I'll do gain dot load and then another dot and I'm going to load this time a spreadsheet.

275
00:44:58.770 --> 00:45:06.810
So game load spreadsheet, very similar to gain upload image. I'm going to give this spreadsheet, a name.

276
00:45:09.060 --> 00:45:19.830
I'll him redhead. And this is an asset key. This is a name that I'm going to be able to refer to later on when I create an actual sprite in the game world and went to use these assets from the spreadsheet.

277
00:45:20.520 --> 00:45:36.360
Now the next thing I need to tell it as the path, the path in this case again I'm inside of animation dot HTML. So just like I was next to the folder. I'm also next to the assets folder. So to write the relative path to find that graphic. I'm gonna write the folder name and then a slash

278
00:45:38.910 --> 00:45:52.200
And then here's the file name, I'll just copy it and paste it over here to make it a little quicker. So now I've got to have the arguments I need to give the spreadsheet method in the load manager telling it to get this thing loaded into the browser's memory.

279
00:45:53.220 --> 00:46:00.810
For the first one is the asset p. That's something I made up. Second one is the path to the graphic file.

280
00:46:02.100 --> 00:46:05.280
Now, there's more. I need to tell it what I'm loading up

281
00:46:07.110 --> 00:46:12.585
A spreadsheet that has fixed width and height, I need to tell it how wide each frame is

282
00:46:15.240 --> 00:46:16.170
Pixels wide.

283
00:46:24.360 --> 00:46:26.310
As you could imagine the argument.

284
00:46:29.790 --> 00:46:32.460
That turns out and I'm going to have this written down, thankfully.

285
00:46:33.720 --> 00:46:45.420
To be 754 pixels, these things are huge how bag. Did I make my game 800 by 400 I'm going to have to shrink. These to even make them visible on the screen a little bit will do that in a minute.

286
00:46:47.160 --> 00:46:54.990
So boom line 30 runs my little asset now called redhead should have been loaded into the browser's memory.

287
00:46:56.610 --> 00:47:01.320
I'm going to go ahead in the Create state. And I'm going to add

288
00:47:03.570 --> 00:47:05.940
A new sprite to the world here.

289
00:47:25.980 --> 00:47:26.550
sprite method.

290
00:47:29.340 --> 00:47:39.630
Now when I do that though. I want to be able to keep track of the sprite later on in my code. So I need to save the sprite that gets created by this method in a variable.

291
00:47:41.070 --> 00:47:41.880
All call him.

292
00:47:43.050 --> 00:48:00.180
My Sprite in this example. So preceding the game add sprite method I'm going to write my sprite equals, and I didn't write a var statement here because I wanted to Claire this variable called My sprite before any of my functions begin

293
00:48:02.700 --> 00:48:06.030
Claire all variables. I need to use

294
00:48:07.320 --> 00:48:09.060
And multiple functions.

295
00:48:12.030 --> 00:48:21.300
Outside of any individual function. It's important, this, this function declaration here with the opening closing curly brace.

296
00:48:21.840 --> 00:48:38.310
Think of this is like a little container that we're sticking our code in if we declare a variable inside those curly braces with the bar statement. It's captive inside that container. It only exists between the curly braces, we're going to want to be able to use my sprite.

297
00:48:39.660 --> 00:48:51.060
All over the place. So I'm going to declare him outside of the functions in that way in terms of kind of the browsers brain my sprite is available to all the functions code that's really important.

298
00:48:52.740 --> 00:48:54.810
So what am I going to do when I add the sprite.

299
00:48:57.540 --> 00:48:59.400
I need to locate it somewhere on the screen.

300
00:49:02.340 --> 00:49:03.420
All located

301
00:49:04.830 --> 00:49:15.210
Pixels from the left and 50 pixels from the top, in terms of the coordinates. So when I do an ad sprite. I have to set exposition.

302
00:49:16.410 --> 00:49:19.620
And why position again x's horizontal

303
00:49:23.610 --> 00:49:24.690
Why is vertical.

304
00:49:26.400 --> 00:49:27.750
So I'm setting those coordinates.

305
00:49:28.770 --> 00:49:31.890
Then I need to tell it the name of the asset to load.

306
00:49:41.550 --> 00:49:43.680
And now I've told him to load up

307
00:49:45.120 --> 00:49:46.860
The redhead asset that I named

308
00:49:51.090 --> 00:49:52.320
We've got all the code written

309
00:49:54.630 --> 00:50:00.060
preload state and the Create state. I'm gonna save this and I'm going to test it out.

310
00:50:04.140 --> 00:50:18.750
I've got this huge redheaded boy sitting in my page. Now in fact he's way too big. So I'm going to need to re scale him now. One technique for rescaling the graphics, by the way back here. I could have shrunk the images.

311
00:50:20.040 --> 00:50:27.090
And I would have saved an even smaller asset file and that would be a good idea if I just want to play this on a regular resolution monitor

312
00:50:27.660 --> 00:50:41.190
But if I'm going to play this on a smartphone, for example, that has something like an HD or an ex HD or Retina display as Apple calls them where there are multiple pixels compressed in that tiny screen.

313
00:50:42.300 --> 00:51:01.800
Reducing the image dimensions will actually use up all those pixels better. So the image of the sprites with the full dimensions will have much better resolution and fidelity. If I just leave them at the same size. But instead, I'm going to shrink the scale. I'm going to really scale.

314
00:51:03.390 --> 00:51:05.490
Size of my spray

315
00:51:07.560 --> 00:51:21.780
And this is one of the reasons why I wanted to save my sprite into a variable because if I want to do any other operations on the spray have created. I have to refer to the variable that holds a reference to it. So I'm gonna write my sprite dot and then scale.

316
00:51:25.500 --> 00:51:33.090
And inside of here, I'm gonna tell it to values decimal numbers so right out that these are arguments.

317
00:51:34.560 --> 00:51:35.610
The X scaling.

318
00:51:38.070 --> 00:51:40.380
Where one equals 100%

319
00:51:41.940 --> 00:51:43.020
And the why scaling.

320
00:51:44.070 --> 00:51:46.050
Also true we're basically going to use numbers.

321
00:51:47.460 --> 00:51:57.600
So you could say where 0.5 equals 50% right so in the X and the Y arguments. I'm going to set him to 25% of his normal size.

322
00:51:59.070 --> 00:52:11.430
gonna save that and I'll go back and we load here and look at that I've now got that same very large asset that I saved in a very big format scaled down to a quarter of its normal size.

323
00:52:18.390 --> 00:52:32.820
So let's keep going in the Create code because the Korea code is a great place. If you're going to create an animation sequence to define that animation sequence, we could use it over and over again. So let's define animation sequence.

324
00:52:34.650 --> 00:52:35.190
My sprite.

325
00:52:36.600 --> 00:52:42.780
Using gets spreadsheet and we know the spreadsheet has multiple frames. So the spreadsheet.

326
00:52:44.940 --> 00:52:55.620
As six frames. In fact, and of course I could go verify that if I went back to look at texture packer 123456 yes six frames. Perfect.

327
00:52:57.300 --> 00:53:06.030
So I'm going to define a new animation sequence that lives as part of the sprites definition. So referred to the sprite variable again.

328
00:53:06.435 --> 00:53:19.200
And this time I'm going to call the animation manager and this guy is represented by the property animations for any sprites. I'm gonna say my sprite animations dot add so it has an ad method also

329
00:53:20.760 --> 00:53:29.700
So what am I going to put in the round parentheses here to pass some values to him. Well, first I'm going to name my animation. I'll call him running

330
00:53:30.810 --> 00:53:38.160
So again, for keeping track of arguments name for the animation sequence is the first thing you sit so you get to make up

331
00:53:39.330 --> 00:53:45.510
Now, the next value we put so we put a comment. After that quoted text of the word running is

332
00:53:46.560 --> 00:53:55.650
The frame numbers inside of square brackets, the square brackets and the javascript language represent an array container basically a list of values.

333
00:53:56.190 --> 00:54:02.580
And so here I'm going to name my value my frames by numbers one comma to come a three come afford them. A 506

334
00:54:03.090 --> 00:54:18.930
So I've got six frames available for this guy in his running state and I'm going to set the timing for how quickly those run I'll set him to be pretty slow. So them to 30 so you can kind of see what that looks like. And then, um, I set it to true.

335
00:54:22.170 --> 00:54:23.520
So the important things here.

336
00:54:30.630 --> 00:54:31.770
Is our second parameter

337
00:54:36.750 --> 00:54:37.380
Playback

338
00:54:39.150 --> 00:54:42.720
Generally, we're always going to set the fourth value sets. True.

339
00:54:45.570 --> 00:54:51.210
So now I've got an animation defined, but I haven't played that animation yet, just to kind of prove that I saved my file.

340
00:54:51.510 --> 00:55:00.810
I'm gonna go back and reloaded here just to show you. Nothing's really changed for the sprite on the screen. Yet in the browsers memory. However, there's now this animation sequence called running

341
00:55:02.910 --> 00:55:03.300
And

342
00:55:04.530 --> 00:55:14.700
We could put it right in here, I suppose. Why don't we do that in the Create state, just to make this example as simple as possible. I'm going to play back this animation sequence.

343
00:55:19.170 --> 00:55:29.160
Again, it's part of my sprites. All right. My sprite dot play and then the name that I gave the animation sequence. I'm gonna play sequence called running

344
00:55:33.780 --> 00:55:44.580
And you can see him going there. Once you tell a sprite to play an animation sequence it automatically loops over and over again. Let's try changing

345
00:55:47.310 --> 00:55:50.040
The fourth parameter instead of default false

346
00:55:52.530 --> 00:56:00.600
Notice that is the loop argument, right. So when I set that parameter to false when I define the animation, it only plays it once.

347
00:56:02.730 --> 00:56:04.350
Reset that the true for endless

348
00:56:05.370 --> 00:56:07.140
Looping of animation.

349
00:56:08.850 --> 00:56:15.660
Otherwise, it only runs once. So if you want that to keep running. As long as you have the sequence playing, you should be that untrue.

350
00:56:19.830 --> 00:56:30.600
And you'll get that behavior that we saw it. First of all, which is that the sequence runs through frames one through six. And then it goes back to frame one and plays it all over again in an endless loop. Pretty cool.

351
00:56:33.120 --> 00:56:37.980
Now the timing I set this to 30 for sending it to 200

352
00:56:42.270 --> 00:56:44.730
Even faster, let's set it to

353
00:56:52.800 --> 00:56:54.840
So this is our timing for each frame.

354
00:56:56.010 --> 00:57:00.540
And it's fractional so one means one whole second right

355
00:57:09.750 --> 00:57:10.710
frames per second.

356
00:57:17.460 --> 00:57:17.910
Value.

357
00:57:19.980 --> 00:57:20.820
Again, that's really

358
00:57:22.530 --> 00:57:32.310
Frames more or less per second. Again, the Fazer engine runs different timing on different browsers and different computers. So your mileage may vary a little bit there.

359
00:57:32.730 --> 00:57:46.110
But that's the basics of setting up a fixed frame dimension spreadsheet. Again, we told it the width and the height of the train back here in the preload. When we loaded the spreadsheet up

360
00:57:47.820 --> 00:58:00.570
And then all we did was add that spreadsheet by its asset key to the new sprite. We made and it then has the ability access any of the frames that spreadsheet, by the way, right here. I could have added a fourth property.

361
00:58:02.340 --> 00:58:03.450
Which frame to start with.

362
00:58:05.430 --> 00:58:15.390
But if you leave it empty there you get simply the first frame from the spreadsheet. I forgot to mention the third argument here, which is the asset kini

363
00:58:17.310 --> 00:58:29.820
Through and every add a spray. Then we scaled him to make him tinier using the scale properties set to method and then with the animation manager, we kicked in a whole named animation six frames long

364
00:58:31.980 --> 00:58:46.290
You can put these frame numbers in any order you want them to play back in. Of course I had my animation stacked so frame one was logically followed by frame to and so on. And then the timing the loop setting. And then the play.

365
00:58:47.490 --> 00:58:57.840
Method as a method of your sprite and calling that animation sequence by name. This gets you animation inside of Fazer

366
00:58:58.740 --> 00:59:09.360
So I am going to have a second part to this week's screen where I'll go into tile maps and do a little quick demo tile maps. Before I build a full fledged game.

367
00:59:09.780 --> 00:59:20.820
That includes animation entail maps in kind of a classic level style game. I'll get that up there later today, want to thank you guys if you join me live today for this first hour of the screen.

368
00:59:21.630 --> 00:59:29.850
As soon as zoom gets done encoding it I'll get it posted up as a link for everybody else. And again before the day is up, I will have Part two available for you.

369
00:59:30.360 --> 00:59:35.400
After a couple meetings, I need to attend to. So thanks for joining me today are joining me online.

370
00:59:35.850 --> 00:59:41.820
And I'm looking forward to seeing questions. I know some of you have been, by the way, emailing me questions.

371
00:59:42.270 --> 00:59:49.890
And it's my habit to go put those into this sharing support discussion so everybody can see the questions that each of us are having and what some of the solutions are

372
00:59:50.460 --> 01:00:04.110
I recommend to all of you. If you've got a question. Don't be shy. Put it up and sharing support, you're likely to get some great ideas and answers from your classmates. This is not just technical questions you can ask either you can ask questions about your game ideas you can share the

373
01:00:05.160 --> 01:00:14.220
The live preview URL for any one of your games should work as a shareable URL with all of us to see what your games working like and we'll start sharing games.

374
01:00:14.580 --> 01:00:24.240
Later on the semester with each other as we get into some more full fledged assignments building towards the final project. So again, thanks for joining. I'll see you online.

375
01:00:26.700 --> 01:00:27.840
Happy coding

